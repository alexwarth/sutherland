// This file is just for receiving events from the Swift Wrapper and the browser.
// It queues them up to be processed by applyEventsTo() in Input.ts

// A "Touch" is a series of spatial input events that describe a single continuous interaction.
// A Touch can be generated by a finger, the pencil, the mouse, etc.
// For now, the rest of the system only works in terms of finger and pencil.
// Other types of touches are synthesized into pencil/finger touches.

import config from './config';
import type { Position } from './helpers';

export type TouchId = number; // Stable identity shared by the series of events that make up a single touch
export type NativeEventType = 'pencil' | 'finger';
export type NativeEventPhase = 'began' | 'moved' | 'ended';

export type NativeEvent = {
  id: TouchId;
  type: NativeEventType;
  phase: NativeEventPhase;
  predicted: boolean;
  position: Position;
  pressure: number;
  altitude: number;
  azimuth: number;
  rollAngle: number;
  radius: number;
  timestamp: number;
};

let queuedEvents: NativeEvent[] = []; // All the events we've received from the wrapper since the last frame
let mouseDown = false;

export function getQueuedEvents() {
  const qe = queuedEvents;
  queuedEvents = [];
  return qe;
}

function wrapperEvents(events: NativeEvent[]) {
  for (const event of events) {
    if (!event.predicted || config().usePredictedEvents) {
      queuedEvents.push(event);
    }
  }
}

function pointerEvent(e: PointerEvent, phase: NativeEventPhase) {
  const type = e.pointerType == 'touch' ? 'finger' : 'pencil';

  if (phase === 'began') mouseDown = true;
  if (phase === 'ended') mouseDown = false;
  if (phase === 'moved' && !mouseDown) return; // When we add support pencil hover, we can allow non-drag mouse events
  queuedEvents.push({
    id: e.pointerId,
    type,
    phase,
    predicted: false,
    position: { x: e.clientX, y: e.clientY },
    pressure: e.pointerType == 'mouse' ? 1 : e.pressure * 5,
    altitude: 0,
    azimuth: 0,
    rollAngle: 0,
    radius: 0,
    timestamp: performance.now(),
  });
}

function clearBrowserEvents() {
  window.onpointerdown = null;
  window.onpointermove = null;
  window.onpointerup = null;
  window.removeEventListener('touchstart', blockSwipe);
  queuedEvents = [];
}

window.onpointerdown = (e: PointerEvent) => pointerEvent(e, 'began');
window.onpointermove = (e: PointerEvent) => pointerEvent(e, 'moved');
window.onpointerup = (e: PointerEvent) => pointerEvent(e, 'ended');

// Block the "swipe in to go back/forward" gesture in mobile safari
const blockSwipe = (e: TouchEvent) => e.preventDefault();
// canvas.addEventListener('touchstart', blockSwipe, { passive: false });
// (disabled because it was blocking interaction with the GUI --codefrau)

// The Wrapper will call a function named "wrapperEvent" on window.
// The first time we receive a call from the wrapper, we can
// remove mouse/keyboard listeners since they're redundant.
(window as any).wrapperEvents = (events: NativeEvent[]) => {
  (window as any).wrapperEvents = wrapperEvents;
  clearBrowserEvents();
  wrapperEvents(events);
};
